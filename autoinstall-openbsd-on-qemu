#! /bin/sh

# Auto-install OpenBSD/amd64 7.7 on QEMU.
#
# First published at https://www.skreutz.com/posts/autoinstall-openbsd-on-qemu/
# on 22 July 2020.
#
# Copyright (c) 2020 Stefan Kreutz <mail@skreutz.com>
#
# Permission to use, copy, modify, and distribute this software for any purpose
# with or without fee is hereby granted, provided that the above copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

set -o errexit
set -o nounset

# OpenBSD Version
OSREV=${OBSD_VERSION-7.7}
OSrev=$(printf '%s' "$OSREV" | tr -d .)

# Trusted HTTPS OpenBSD mirror to fetch the base public key from.
# See <https://www.openbsd.org/ftp.html#http>.
HTTPS_MIRROR="${HTTPS_MIRROR-https://ftp.openbsd.org/pub/OpenBSD/}"

# Untrusted rsync OpenBSD mirror.
# See <https://www.openbsd.org/ftp.html#rsync>.
RSYNC_MIRROR="${RSYNC_MIRROR-rsync://mirror.leaseweb.com/openbsd/}"

# File name of the disk image.
DISK_FILE="${DISK_FILE-disk.qcow2}"

# Size of the disk image.
DISK_SIZE="${DISK_SIZE-64G}"

# Number of virtual CPUs.
CPU_COUNT="${CPU_COUNT-$(grep -c ^processor /proc/cpuinfo)}"

# Size of virtual memory.
MEMORY_SIZE="${MEMORY_SIZE-4G}"

# File name of the public SSH key to authorize.
SSH_KEY="${SSH_KEY-${HOME}/.ssh/id_ed25519.pub}"

# C compiler
CC="${CC-gcc}"

# Script to start VM after installation. If empty do not generate script.
RUNSCRIPT=${RUNSCRIPT-run-openbsd}

# Script to ssh into VM. If empty do not generate script.
SSHSCRIPT=${SSHSCRIPT-ssh-openbsd}

# Check required commands.
for cmd in curl qemu-img qemu-system-x86_64 rsync signify ssh "${CC}" python3
do
  if ! command -v "${cmd}" >/dev/null
  then
    ( >&2 printf "command not found: %s\\n" "${cmd}" )
    exit 1
  fi
done

# Fetch base public key from trusted HTTPS mirror.
mkdir -p mirror/pub/OpenBSD/${OSREV}
if [ ! -e mirror/pub/OpenBSD/${OSREV}/openbsd-${OSrev}-base.pub ]
then
  curl \
    --silent \
    --output mirror/pub/OpenBSD/${OSREV}/openbsd-${OSrev}-base.pub \
    "${HTTPS_MIRROR}${OSREV}/openbsd-${OSrev}-base.pub"
  printf "Fetched base public key from %s\\n" "${HTTPS_MIRROR}"
fi

# Fetch kernel, PXE bootstrap program, and file sets from untrusted rsync
# mirror.
if [ ! -d mirror/pub/OpenBSD/${OSREV}/amd64 ]
then
  mkdir -p tmp
  printf "Fetching installation files ...\\n"
  rsync --archive --files-from=- --quiet \
    "${RSYNC_MIRROR}${OSREV}/amd64/" \
    tmp/ \
    << EOF
SHA256.sig
base${OSrev}.tgz
bsd
bsd.mp
bsd.rd
comp${OSrev}.tgz
game${OSrev}.tgz
man${OSrev}.tgz
pxeboot
xbase${OSrev}.tgz
xfont${OSrev}.tgz
xserv${OSrev}.tgz
xshare${OSrev}.tgz
BUILDINFO
EOF
  ( cd tmp && signify -C -q \
      -p ../mirror/pub/OpenBSD/${OSREV}/openbsd-${OSrev}-base.pub \
      -x SHA256.sig \
      -- bsd bsd.* pxeboot *${OSrev}.tgz )
  mv tmp mirror/pub/OpenBSD/${OSREV}/amd64
  printf "Fetched kernel, PXE bootstrap program, and file sets from %s\\n" "${RSYNC_MIRROR}"
fi

# Create autoinstall(8) configuration if not exists.
if [ ! -e mirror/install.conf ]
then
  cat << EOF > mirror/install.conf
Change the default console to com0 = yes
Which speed should com0 use = 115200
System hostname = openbsd
Password for root = *************
Allow root ssh login = no
Setup a user = puffy
Password for user = *************
Public ssh key for user = $( cat "${SSH_KEY}" )
What timezone are you in = UTC
Location of sets = http
HTTP Server = 10.0.2.2
Unable to connect using https. Use http instead = yes
URL to autopartitioning template for disklabel = http://10.0.2.2/disklabel
Set name(s) = site${OSrev}.tgz
Checksum test for site${OSrev}.tgz failed. Continue anyway = yes
Unverified sets: site${OSrev}.tgz. Continue without verification = yes
EOF
  printf "Created example response file for autoinstall(8) at ./mirror/install.conf\\n"
fi

# Create disklabel(8) configuration if not exists.
# Assume disk size of at least 54G.
if [ ! -e mirror/disklabel ]
then
  cat << EOF > mirror/disklabel
/            1G
swap         8G
/tmp         4G
/var         4G
/usr         6G
/usr/X11R6   1G
/usr/local   20G
/usr/src     3G
/usr/obj     6G
/home        1G-*
EOF
  printf "Created example disklabel(8) template at ./mirror/disklabel.conf\\n"
fi

# Create site-specific file set if not exists.
if [ ! -d site ]
then
  mkdir site
  cat << EOF > site/install.site
#! /bin/ksh

set -o errexit

# Reset OpenBSD mirror server used by pkg_add(1) and other commands.
echo "https://cdn.openbsd.org/pub/OpenBSD" > /etc/installurl

# Permit user group wheel to run any command as root without entering their
# password using doas(1).
echo "permit nopass keepenv :wheel" > /etc/doas.conf

# Patch the base system on the first boot.
#echo "syspatch && shutdown -r now" >> /etc/rc.firsttime
EOF
  chmod +x site/install.site
  printf "Created example site-specific file set at ./site\\n"
fi

# Package site-specific file set if not exists or changed.
site_dir_changed="$( find site -exec stat -c %Y {} \; | sort -r | head -n 1 )"
if [ ! -e mirror/pub/OpenBSD/${OSREV}/amd64/site${OSrev}.tgz ] || [ "$( stat -c %Y mirror/pub/OpenBSD/${OSREV}/amd64/site"${OSrev}".tgz )" -lt "${site_dir_changed}" ]
then
  rm -f mirror/pub/OpenBSD/${OSREV}/amd64/site${OSrev}.tgz
  ( cd site && tar -czf ../mirror/pub/OpenBSD/${OSREV}/amd64/site${OSrev}.tgz . )
  ( cd mirror/pub/OpenBSD/${OSREV}/amd64 && ls -l > index.txt )
fi

# Create TFTP directory if not exists.
if [ ! -d tftp ]
then
  mkdir tftp
  ln -s ../mirror/pub/OpenBSD/${OSREV}/amd64/pxeboot tftp/auto_install
  ln -s ../mirror/pub/OpenBSD/${OSREV}/amd64/bsd.rd tftp/bsd.rd
  mkdir tftp/etc
  cat << EOF > tftp/etc/boot.conf
stty com0 115200
set tty com0
boot tftp:/bsd.rd
EOF
  printf "Created example boot(8) configuration at ./tftp/etc/boot.conf\\n"
fi

# Remove existing disk image if configuration changed.
if [ -e "${DISK_FILE}" ]
then
  vm_created="$( stat -c %W "${DISK_FILE}" )"
  for f in mirror/install.conf mirror/disklabel mirror/pub/OpenBSD/${OSREV}/amd64/site${OSrev}.tgz tftp/etc/boot.conf
  do
    if [ "${vm_created}" -lt "$( stat -c %Y "$f" )" ]
    then
      printf "Re-creating virtual machine due to changed configuration: %s\\n" "$f"
      rm "${DISK_FILE}"
    fi
  done
fi

# Create disk image if not exists.
if [ ! -e "${DISK_FILE}" ]
then
  qemu-img create -q -f qcow2 "${DISK_FILE}" -o nocow=on "${DISK_SIZE}"
  printf "Created %s copy-on-write disk image at %s\\n" "${DISK_SIZE}" "${DISK_FILE}"
fi

# Serve mirror at unprivileged port 8080.
python3 \
  -m http.server \
  --directory mirror \
  --bind 127.0.0.1 8080 &
server_pid=$!

# Add cleanup trap for http server.
trap 'kill "$server_pid" 2>/dev/null' INT TERM EXIT

# Compile patch to overwrite connect() to redirect request for port 80 to 8080
if [ ! -e qemu_patch.so ]
then
  ${CC} -Wall -fPIC -shared -ldl -o qemu_patch.so -xc - << EOF
  #define _GNU_SOURCE
  #include <arpa/inet.h>
  #include <dlfcn.h>
  #include <netinet/in.h>
  #include <stdio.h>
  #include <string.h>
  #include <sys/socket.h>

  // Function pointer to the original connect()
  int (*original_connect)(int, const struct sockaddr *, socklen_t) = NULL;

  int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen) {
    // Load the original connect()
    if (!original_connect) {
      original_connect = dlsym(RTLD_NEXT, "connect");
    }

    // Check if the target is 127.0.0.1:80 and change port to 8080
    if (addr->sa_family == AF_INET) {
      struct sockaddr_in *addr_in = (struct sockaddr_in *)addr;

      if (ntohs(addr_in->sin_port) == 80 &&
          addr_in->sin_addr.s_addr == htonl(INADDR_LOOPBACK)) {
        fprintf(stderr,
                "[LD_PRELOAD] On host redirecting port 80 to port 8080\n");
        addr_in->sin_port = htons(8080);
      }
    }

    return original_connect(sockfd, addr, addrlen);
  }
EOF
fi

# Create run script for use after installation.
if [ -n "${RUNSCRIPT}" ]
then
  cat << EOF > "${RUNSCRIPT}"
#!/bin/sh
qemu-system-x86_64 \
  -enable-kvm \
  -smp "cpus=${CPU_COUNT}" \
  -m "${MEMORY_SIZE}" \
  -drive "file=${DISK_FILE},media=disk,if=virtio" \
  -device virtio-net-pci,netdev=n1 \
  -netdev "user,id=n1,hostname=openbsd-vm,hostfwd=tcp::2222-:22" \
  -nographic \
  "\${@}"
EOF
  chmod +x "${RUNSCRIPT}"
fi

# Create ssh script.
if [ -n "${SSHSCRIPT}" ]
then
  cat << EOF > "${SSHSCRIPT}"
#!/bin/sh
ssh \
  -o "StrictHostKeyChecking no" \
  -o "UserKnownHostsFile /dev/null" \
  -o "Port 2222" \
  puffy@127.0.0.1 \
  "\${@}"
EOF
  chmod +x "${SSHSCRIPT}"
fi

# Auto-install OpenBSD. Patch qemu with LD_PRELOAD.
printf "Starting virtual machine ...\\n"
LD_PRELOAD="$PWD/qemu_patch.so" qemu-system-x86_64 \
  -enable-kvm \
  -smp "cpus=${CPU_COUNT}" \
  -m "${MEMORY_SIZE}" \
  -drive "file=${DISK_FILE},media=disk,if=virtio" \
  -device virtio-net-pci,netdev=n1 \
  -netdev "user,id=n1,hostname=openbsd-vm,tftp=tftp,bootfile=auto_install,hostfwd=tcp::2222-:22" \
  -nographic

# Shut down http sever.
kill "$server_pid"
wait "$server_pid" 2>/dev/null
